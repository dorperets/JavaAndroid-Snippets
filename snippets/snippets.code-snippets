{
    /** 
     * Created by Dor Perets 11/07/2022
     */
        "For Loop":{
            "prefix": ["foreach"],
            "body": [
                "for (${1|int,String,boolean,long,float,double,short,byte,char|} element : ${2:arrayName}) {", 
                "\t", 
                "}"
            ],
            "description": "A for loop."
        },
    
        "Fori":{
            "prefix": ["fori", "for"],
            "body": [
                "for (int i = ${1:0}; i < ${2:LENGTH}; i++) {",
                "\t$0",
                "}"
            ],
            "description": "Another for loop."
        },
    
        "TAG": {
            "prefix": ["tag"],
            "body": ["private static final String TAG = \"${1:$TM_FILENAME_BASE}\";"],
            "description": "TAG"
        },
    
        "logi": {
            "prefix": ["logi"],
            "body": ["Log.i(TAG, \"$0\");"],
            "description": "Log info"
        },
    
        "loge": {
            "prefix": ["loge"],
            "body": ["Log.e(TAG, \"$0\", e);"],
            "description": "Log error"
        },
    
        "If null": {
            "prefix": ["ifn", "nullcheck"],
            "body": [
                "if (${1:varName} == null) {",
                "\t$0",
                "}"
            ],
            "description": "if null"
        },
    
        "if not null": {
            "prefix": ["inn", "notnull", "ifnn"],
            "body": [
                "if (${1:varName} != null) {",
                "\t$0",
                "}"
            ],
            "description": "if not null"
        },
    
        "Switch": {
            "prefix": ["sw", "switch"],
            "body": [
                "switch (${1:varName}) {",
                "\tcase ${2:value}:",
                "\t\t$0",
                "\t\tbreak;",
                "\tcase ${3:value2}:",
                "\t\t$0",
                "\t\tbreak;",
                "\tcase ${4:value3}:",
                "\t\t$0",
                "\t\tbreak;",
                "\tdefault:",
                "\t\tbreak;",
                "}"
            ],
            "description": "switch-case"
        },
    
        "Try block": {
            "prefix": ["try"],
            "body": [
                "try {",
                "\t$TM_SELECTED_TEXT",
                "} catch (${1:Exception} ex) {",
                "\tLog.e(TAG,\"Exception caught : \", ex);",
                "}"
            ],
            "description": "try catch block"
        },
    
        "onClickListener": {
            "prefix": ["onclick", "clicker","onClick"],
            "body": [
                "${1:viewName}.setOnClickListener(v -> {" , 
                "\t$0", 
                "});"],
            "description": "setOnClickListener"
        },
    
        "func": {
            "prefix": ["func","foo"],
            "body": [
                "${1|private,public,protected, |} ${2|void,int,String,boolean,Intent,Context,long,float,double,short,byte,char|} ${3:methodName}($4) {",			"\t$0",
                "}",
                ""
            ],
            "description": "function"
        },
    
        "const": {
            "prefix": ["sf", "const", "psf", "psfs"],
            "body": [
                "${1|private,public,protected, |} static final ${2|int,String,boolean,Intent,Context,long,float,double,short,byte,char|} ${3:VAR_NAME} = ${4:value};",
                "$0"
            ],
            "description": "constant"
        },
    
        "variable": {
            "prefix": ["var", "variable"],
            "body": [
                "${1|int,String,boolean,Intent,Context,long,float,double,short,byte,char|} ${2:varName} = ${3:defaultValue};",
                "$0"
            ],
            "description": "variable"
        },
    
        "view": {
            "prefix": ["view", "fvbi"],
            "body": [
                "${1|View,Button,TextView,ImageView,Switch,Spinner|} ${2:varName} = findViewById(R.id.${3:layoutID});",
                "$0"
            ],
            "description": "common view"
        },
    
        "oncreate": {
            "prefix": ["onc", "oncreate"],
            "body": [
                "@Override",
                "protected void onCreate(Bundle savedInstanceState) {",
                "\tsuper.onCreate(savedInstanceState);",
                "\t$0",
                "}"
            ],
            "description": "oncreate"
        },
    
        "onresume": {
            "prefix": ["onr", "onresume"],
            "body": [
                "@Override",
                "protected void onResume() {",
                "\tsuper.onResume();",
                "\t$0",
                "}"
            ],
            "description": "onresume"
        },
    
        "onpause": {
            "prefix": ["onp", "onpause"],
            "body": [
                "@Override",
                "protected void onPause() {",
                "\tsuper.onPause();",
                "\t$0",
                "}"
            ],
            "description": "onpause"
        },
    
        "ondestroy": {
            "prefix": ["ond", "ondestroy"],
            "body": [
                "@Override",
                "protected void onDestroy() {",
                "\tsuper.onDestroy();",
                "\t$0",
                "}"
            ],
            "description": "ondestroy"
        },
    
        "mcontext": {
            "prefix": ["mContext", "ctxt", "mctxt"],
            "body": [
                "Context mContext = ${1|this,context,getContext(),getApplicationContext(), |};",
                "$0"
            ],
            "description": "context assigning"
        },
    
        "Receiver": {
            "prefix": ["receiver", "onreceive", "br"],
            "body": [
                "private BroadcastReceiver ${1:receiverName} = new BroadcastReceiver() {",
                "\t@Override",
                "\tpublic void onReceive(Context context, Intent intent) {",
                "\t\tfinal String action = intent.getAction();",
                "\t\tLog.d(TAG, \"${1:receiverName} - onReceive : \" + action);",
                "\t\t$0",
                "\t}",
                "};"
            ],
            "description": "broadcast receiver"
        },

        "service": {
            "prefix": ["service", "svc"],
            "body": [
                "public class ${1:serviceName} extends Service {",
                "\tprivate static final String TAG = \"${1:serviceName}\";",
                "\tpublic ${1:serviceName}() {",
                "\t\t$0",
                "\t}",
                "",
                "\t@Override",
                "\tpublic int onStartCommand(Intent intent, int flags, int startId) {",
                "\t\tLog.d(TAG, \"onStartCommand\");",
                "\t\t$0",
                "\t\treturn super.onStartCommand(intent, flags, startId);",
                "\t}",
                "",
                "\t@Override",
                "\tpublic IBinder onBind(Intent intent) {",
                "\t\tLog.d(TAG, \"onBind\");",
                "\t\t$0",
                "\t\treturn START_STICKY;",
                "\t\t//return null;",
                "\t}",
                "}"

            ],
            "description": "serviceClass"
        },

        "thread": {
            "prefix": ["thread", "th"],
            "body": [
                "Thread ${1:threadName} = new Thread(() -> {",
                "\t$0",
                "});",
                "${1:threadName}.start();",
                "try {",
                "\t${1:threadName}.join();",
                "} catch (InterruptedException e) {",
                "\tLog.e(TAG, \"InterruptedException waiting for thread ${1:threadName}\", e);",
                "}"
            ],
            "description": "setprop"
        },
    
        "setprop": {
            "prefix": ["setprop", "setp"],
            "body": [
                "SystemProperties.set(${1:PROPERTY_NAME},${2:PROPERTY_VALUE});"
            ],
            "description": "setprop"
        },
    
        "getprop": {
            "prefix": ["getprop", "getp"],
            "body": [
                "SystemProperties.get(${1:PROPERTY_NAME},${2:defaultValue});"
            ],
            "description": "getprop"
        },

        "Singleton": {
            "prefix": [
                "singleton", "sngl"
            ],
            "body": [
                "public class ${1:$TM_FILENAME_BASE} {",
                "",
                "\tprivate static volatile ${1:$TM_FILENAME_BASE} instance;",
                "",
                "\tprivate ${1:$TM_FILENAME_BASE}(){",
                "\t\t// TODO : Create the Singleton!",
                "\t}",
                "\t/**",
                "\t * @return the single instance, thread safe",
                "\t */",
                "\tpublic static ${1:$TM_FILENAME_BASE} getInstance(){",
                "\t\tif (instance == null) {",
                "\t\t\tsynchronized (${1:$TM_FILENAME_BASE}.class) {",
                "\t\t\t\tif (instance == null) {",
                "\t\t\t\t\tinstance = new ${1:$TM_FILENAME_BASE}();",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t\treturn instance;",
                "\t}",
                "}",
            ],
            "description": "singleton"
        },

        "enum": {
            "prefix": [
                "enum"
            ],
            "body": [
                "public enum ${1:$TM_FILENAME_BASE} {",
                "\t${2:ONE},",
                "\t${3:TWO},",
                "\t${4:THREE},",
                "}"
            ],
            "description": "An enum"
        },
    
}